---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  selector:
    matchLabels:
      app: redis
  serviceName: redis
  replicas: {{ .Values.redis.replicaCount }}
  minReadySeconds: 10 # by default is 0
  template:
    metadata:
      {{- with .Values.redis.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        app: redis
    spec:
      securityContext:
        {{- toYaml .Values.redis.podSecurityContext | nindent 8 }}
      terminationGracePeriodSeconds: 10
      initContainers:
        - name: init-redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          imagePullPolicy: {{ .Values.redis.image.pullPolicy }}
          command:
            - bash
            - "-c"
            - |
              set -ex
              #get hostname to announce
              HOSTNAME=$(hostname)
              MASTER=""
              #check the role of every other redis pod
              for i in {0..2}; do
                #check each redis instance if it is the master, timeout after 3 seconds
                ROLE=$(timeout 3 redis-cli -h redis-$i --raw role | sed -n "1p")
                #if the redis pod has the role master, then set the master variable
                if [[ "$ROLE" = "master" ]]; then
                  MASTER=redis-$i
                  echo "found master $MASTER"
                  break
                fi
              done
              #copy readonly config template
              cp /mnt/config-map/replica.conf /etc/redis.conf
              #replace hostname in config
              sed -i "s/\$HOST/$HOSTNAME/g" /etc/redis.conf
              if [[ -z "$MASTER" ]]; then
                echo "current master was not found"
              else
                #if a master was found, insert replicaof in config
                echo "replicaof $MASTER 6379" > /etc/redis.conf
              fi
              cp /mnt/config-map/ping.sh /etc/ping.sh
          volumeMounts:
            - name: conf
              mountPath: /etc
              subPath: redis.conf
            - name: config
              mountPath: /mnt/config-map
      containers:
        - name: redis
          image: "{{ .Values.redis.image.repository }}:{{ .Values.redis.image.tag }}"
          imagePullPolicy: {{ .Values.redis.image.pullPolicy }}
          command:
            - redis-server
          args:
            - /etc/redis.conf
          env:
            - name: ALLOW_EMPTY_PASSWORD
              value: "yes"
          ports:
            - containerPort: 6379
              name: redis-tcp
              protocol: TCP
          readinessProbe:
            initialDelaySeconds: 3
            periodSeconds: 1
            exec:
              command:
                - sh
                - -c
                - /etc/ping.sh
          livenessProbe:
            initialDelaySeconds: 3
            exec:
              command:
                - sh
                - -c
                - /etc/ping.sh
          volumeMounts:
            - name: redis-data
              mountPath: /data
              readOnly: false
            - name: conf
              mountPath: /etc/
              subPath: redis.conf
          resources:
            {{- toYaml .Values.redis.resources | nindent 12 }}
      volumes:
        - name: conf
          emptyDir:
            sizeLimit: 100Mi
        - name: config
          configMap:
            name: redis
            defaultMode: 0777
        - name: redis-data
          emptyDir:
            sizeLimit: 500Mi
      {{- with .Values.redis.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.redis.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.redis.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
